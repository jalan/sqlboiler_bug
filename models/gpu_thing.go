// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GpuThing is an object representing the database table.
type GpuThing struct {
	GpuThingID int      `boil:"gpu_thing_id" json:"gpu_thing_id" toml:"gpu_thing_id" yaml:"gpu_thing_id"`
	GpuID      null.Int `boil:"gpu_id" json:"gpu_id,omitempty" toml:"gpu_id" yaml:"gpu_id,omitempty"`

	R *gpuThingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gpuThingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GpuThingColumns = struct {
	GpuThingID string
	GpuID      string
}{
	GpuThingID: "gpu_thing_id",
	GpuID:      "gpu_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GpuThingWhere = struct {
	GpuThingID whereHelperint
	GpuID      whereHelpernull_Int
}{
	GpuThingID: whereHelperint{field: "\"gpu_thing\".\"gpu_thing_id\""},
	GpuID:      whereHelpernull_Int{field: "\"gpu_thing\".\"gpu_id\""},
}

// GpuThingRels is where relationship names are stored.
var GpuThingRels = struct {
	Gpu string
}{
	Gpu: "Gpu",
}

// gpuThingR is where relationships are stored.
type gpuThingR struct {
	Gpu *Gpu `boil:"Gpu" json:"Gpu" toml:"Gpu" yaml:"Gpu"`
}

// NewStruct creates a new relationship struct
func (*gpuThingR) NewStruct() *gpuThingR {
	return &gpuThingR{}
}

// gpuThingL is where Load methods for each relationship are stored.
type gpuThingL struct{}

var (
	gpuThingAllColumns            = []string{"gpu_thing_id", "gpu_id"}
	gpuThingColumnsWithoutDefault = []string{"gpu_id"}
	gpuThingColumnsWithDefault    = []string{"gpu_thing_id"}
	gpuThingPrimaryKeyColumns     = []string{"gpu_thing_id"}
)

type (
	// GpuThingSlice is an alias for a slice of pointers to GpuThing.
	// This should generally be used opposed to []GpuThing.
	GpuThingSlice []*GpuThing
	// GpuThingHook is the signature for custom GpuThing hook methods
	GpuThingHook func(context.Context, boil.ContextExecutor, *GpuThing) error

	gpuThingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gpuThingType                 = reflect.TypeOf(&GpuThing{})
	gpuThingMapping              = queries.MakeStructMapping(gpuThingType)
	gpuThingPrimaryKeyMapping, _ = queries.BindMapping(gpuThingType, gpuThingMapping, gpuThingPrimaryKeyColumns)
	gpuThingInsertCacheMut       sync.RWMutex
	gpuThingInsertCache          = make(map[string]insertCache)
	gpuThingUpdateCacheMut       sync.RWMutex
	gpuThingUpdateCache          = make(map[string]updateCache)
	gpuThingUpsertCacheMut       sync.RWMutex
	gpuThingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gpuThingBeforeInsertHooks []GpuThingHook
var gpuThingBeforeUpdateHooks []GpuThingHook
var gpuThingBeforeDeleteHooks []GpuThingHook
var gpuThingBeforeUpsertHooks []GpuThingHook

var gpuThingAfterInsertHooks []GpuThingHook
var gpuThingAfterSelectHooks []GpuThingHook
var gpuThingAfterUpdateHooks []GpuThingHook
var gpuThingAfterDeleteHooks []GpuThingHook
var gpuThingAfterUpsertHooks []GpuThingHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GpuThing) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuThingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GpuThing) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuThingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GpuThing) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuThingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GpuThing) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuThingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GpuThing) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuThingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GpuThing) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuThingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GpuThing) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuThingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GpuThing) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuThingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GpuThing) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuThingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGpuThingHook registers your hook function for all future operations.
func AddGpuThingHook(hookPoint boil.HookPoint, gpuThingHook GpuThingHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		gpuThingBeforeInsertHooks = append(gpuThingBeforeInsertHooks, gpuThingHook)
	case boil.BeforeUpdateHook:
		gpuThingBeforeUpdateHooks = append(gpuThingBeforeUpdateHooks, gpuThingHook)
	case boil.BeforeDeleteHook:
		gpuThingBeforeDeleteHooks = append(gpuThingBeforeDeleteHooks, gpuThingHook)
	case boil.BeforeUpsertHook:
		gpuThingBeforeUpsertHooks = append(gpuThingBeforeUpsertHooks, gpuThingHook)
	case boil.AfterInsertHook:
		gpuThingAfterInsertHooks = append(gpuThingAfterInsertHooks, gpuThingHook)
	case boil.AfterSelectHook:
		gpuThingAfterSelectHooks = append(gpuThingAfterSelectHooks, gpuThingHook)
	case boil.AfterUpdateHook:
		gpuThingAfterUpdateHooks = append(gpuThingAfterUpdateHooks, gpuThingHook)
	case boil.AfterDeleteHook:
		gpuThingAfterDeleteHooks = append(gpuThingAfterDeleteHooks, gpuThingHook)
	case boil.AfterUpsertHook:
		gpuThingAfterUpsertHooks = append(gpuThingAfterUpsertHooks, gpuThingHook)
	}
}

// One returns a single gpuThing record from the query.
func (q gpuThingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GpuThing, error) {
	o := &GpuThing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gpu_thing")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GpuThing records from the query.
func (q gpuThingQuery) All(ctx context.Context, exec boil.ContextExecutor) (GpuThingSlice, error) {
	var o []*GpuThing

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GpuThing slice")
	}

	if len(gpuThingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GpuThing records in the query.
func (q gpuThingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gpu_thing rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gpuThingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gpu_thing exists")
	}

	return count > 0, nil
}

// Gpu pointed to by the foreign key.
func (o *GpuThing) Gpu(mods ...qm.QueryMod) gpuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"gpu_id\" = ?", o.GpuID),
	}

	queryMods = append(queryMods, mods...)

	query := Gpus(queryMods...)
	queries.SetFrom(query.Query, "\"gpu\"")

	return query
}

// LoadGpu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gpuThingL) LoadGpu(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGpuThing interface{}, mods queries.Applicator) error {
	var slice []*GpuThing
	var object *GpuThing

	if singular {
		object = maybeGpuThing.(*GpuThing)
	} else {
		slice = *maybeGpuThing.(*[]*GpuThing)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gpuThingR{}
		}
		if !queries.IsNil(object.GpuID) {
			args = append(args, object.GpuID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gpuThingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GpuID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GpuID) {
				args = append(args, obj.GpuID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gpu`),
		qm.WhereIn(`gpu.gpu_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gpu")
	}

	var resultSlice []*Gpu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gpu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gpu")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gpu")
	}

	if len(gpuThingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Gpu = foreign
		if foreign.R == nil {
			foreign.R = &gpuR{}
		}
		foreign.R.GpuThings = append(foreign.R.GpuThings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GpuID, foreign.GPUID) {
				local.R.Gpu = foreign
				if foreign.R == nil {
					foreign.R = &gpuR{}
				}
				foreign.R.GpuThings = append(foreign.R.GpuThings, local)
				break
			}
		}
	}

	return nil
}

// SetGpu of the gpuThing to the related item.
// Sets o.R.Gpu to related.
// Adds o to related.R.GpuThings.
func (o *GpuThing) SetGpu(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Gpu) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"gpu_thing\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"gpu_id"}),
		strmangle.WhereClause("\"", "\"", 2, gpuThingPrimaryKeyColumns),
	)
	values := []interface{}{related.GPUID, o.GpuThingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GpuID, related.GPUID)
	if o.R == nil {
		o.R = &gpuThingR{
			Gpu: related,
		}
	} else {
		o.R.Gpu = related
	}

	if related.R == nil {
		related.R = &gpuR{
			GpuThings: GpuThingSlice{o},
		}
	} else {
		related.R.GpuThings = append(related.R.GpuThings, o)
	}

	return nil
}

// RemoveGpu relationship.
// Sets o.R.Gpu to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *GpuThing) RemoveGpu(ctx context.Context, exec boil.ContextExecutor, related *Gpu) error {
	var err error

	queries.SetScanner(&o.GpuID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("gpu_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Gpu = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GpuThings {
		if queries.Equal(o.GpuID, ri.GpuID) {
			continue
		}

		ln := len(related.R.GpuThings)
		if ln > 1 && i < ln-1 {
			related.R.GpuThings[i] = related.R.GpuThings[ln-1]
		}
		related.R.GpuThings = related.R.GpuThings[:ln-1]
		break
	}
	return nil
}

// GpuThings retrieves all the records using an executor.
func GpuThings(mods ...qm.QueryMod) gpuThingQuery {
	mods = append(mods, qm.From("\"gpu_thing\""))
	return gpuThingQuery{NewQuery(mods...)}
}

// FindGpuThing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGpuThing(ctx context.Context, exec boil.ContextExecutor, gpuThingID int, selectCols ...string) (*GpuThing, error) {
	gpuThingObj := &GpuThing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gpu_thing\" where \"gpu_thing_id\"=$1", sel,
	)

	q := queries.Raw(query, gpuThingID)

	err := q.Bind(ctx, exec, gpuThingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gpu_thing")
	}

	return gpuThingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GpuThing) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_thing provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuThingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gpuThingInsertCacheMut.RLock()
	cache, cached := gpuThingInsertCache[key]
	gpuThingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gpuThingAllColumns,
			gpuThingColumnsWithDefault,
			gpuThingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gpuThingType, gpuThingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gpuThingType, gpuThingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gpu_thing\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gpu_thing\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gpu_thing")
	}

	if !cached {
		gpuThingInsertCacheMut.Lock()
		gpuThingInsertCache[key] = cache
		gpuThingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GpuThing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GpuThing) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gpuThingUpdateCacheMut.RLock()
	cache, cached := gpuThingUpdateCache[key]
	gpuThingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gpuThingAllColumns,
			gpuThingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update gpu_thing, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gpu_thing\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gpuThingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gpuThingType, gpuThingMapping, append(wl, gpuThingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update gpu_thing row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for gpu_thing")
	}

	if !cached {
		gpuThingUpdateCacheMut.Lock()
		gpuThingUpdateCache[key] = cache
		gpuThingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gpuThingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for gpu_thing")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for gpu_thing")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GpuThingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuThingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gpu_thing\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gpuThingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gpuThing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gpuThing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GpuThing) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu_thing provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuThingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gpuThingUpsertCacheMut.RLock()
	cache, cached := gpuThingUpsertCache[key]
	gpuThingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gpuThingAllColumns,
			gpuThingColumnsWithDefault,
			gpuThingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			gpuThingAllColumns,
			gpuThingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert gpu_thing, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gpuThingPrimaryKeyColumns))
			copy(conflict, gpuThingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gpu_thing\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gpuThingType, gpuThingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gpuThingType, gpuThingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert gpu_thing")
	}

	if !cached {
		gpuThingUpsertCacheMut.Lock()
		gpuThingUpsertCache[key] = cache
		gpuThingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GpuThing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GpuThing) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GpuThing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gpuThingPrimaryKeyMapping)
	sql := "DELETE FROM \"gpu_thing\" WHERE \"gpu_thing_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from gpu_thing")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for gpu_thing")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gpuThingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gpuThingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpu_thing")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_thing")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GpuThingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gpuThingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuThingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gpu_thing\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuThingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpuThing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu_thing")
	}

	if len(gpuThingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GpuThing) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGpuThing(ctx, exec, o.GpuThingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GpuThingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GpuThingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuThingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gpu_thing\".* FROM \"gpu_thing\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuThingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GpuThingSlice")
	}

	*o = slice

	return nil
}

// GpuThingExists checks if the GpuThing row exists.
func GpuThingExists(ctx context.Context, exec boil.ContextExecutor, gpuThingID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gpu_thing\" where \"gpu_thing_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gpuThingID)
	}
	row := exec.QueryRowContext(ctx, sql, gpuThingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gpu_thing exists")
	}

	return exists, nil
}
