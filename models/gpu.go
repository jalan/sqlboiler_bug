// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Gpu is an object representing the database table.
type Gpu struct {
	GPUID int `boil:"gpu_id" json:"gpu_id" toml:"gpu_id" yaml:"gpu_id"`

	R *gpuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gpuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GpuColumns = struct {
	GPUID string
}{
	GPUID: "gpu_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var GpuWhere = struct {
	GPUID whereHelperint
}{
	GPUID: whereHelperint{field: "\"gpu\".\"gpu_id\""},
}

// GpuRels is where relationship names are stored.
var GpuRels = struct {
	GpuThings string
}{
	GpuThings: "GpuThings",
}

// gpuR is where relationships are stored.
type gpuR struct {
	GpuThings GpuThingSlice `boil:"GpuThings" json:"GpuThings" toml:"GpuThings" yaml:"GpuThings"`
}

// NewStruct creates a new relationship struct
func (*gpuR) NewStruct() *gpuR {
	return &gpuR{}
}

// gpuL is where Load methods for each relationship are stored.
type gpuL struct{}

var (
	gpuAllColumns            = []string{"gpu_id"}
	gpuColumnsWithoutDefault = []string{}
	gpuColumnsWithDefault    = []string{"gpu_id"}
	gpuPrimaryKeyColumns     = []string{"gpu_id"}
)

type (
	// GpuSlice is an alias for a slice of pointers to Gpu.
	// This should generally be used opposed to []Gpu.
	GpuSlice []*Gpu
	// GpuHook is the signature for custom Gpu hook methods
	GpuHook func(context.Context, boil.ContextExecutor, *Gpu) error

	gpuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gpuType                 = reflect.TypeOf(&Gpu{})
	gpuMapping              = queries.MakeStructMapping(gpuType)
	gpuPrimaryKeyMapping, _ = queries.BindMapping(gpuType, gpuMapping, gpuPrimaryKeyColumns)
	gpuInsertCacheMut       sync.RWMutex
	gpuInsertCache          = make(map[string]insertCache)
	gpuUpdateCacheMut       sync.RWMutex
	gpuUpdateCache          = make(map[string]updateCache)
	gpuUpsertCacheMut       sync.RWMutex
	gpuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gpuBeforeInsertHooks []GpuHook
var gpuBeforeUpdateHooks []GpuHook
var gpuBeforeDeleteHooks []GpuHook
var gpuBeforeUpsertHooks []GpuHook

var gpuAfterInsertHooks []GpuHook
var gpuAfterSelectHooks []GpuHook
var gpuAfterUpdateHooks []GpuHook
var gpuAfterDeleteHooks []GpuHook
var gpuAfterUpsertHooks []GpuHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Gpu) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Gpu) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Gpu) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Gpu) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Gpu) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Gpu) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Gpu) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Gpu) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Gpu) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gpuAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGpuHook registers your hook function for all future operations.
func AddGpuHook(hookPoint boil.HookPoint, gpuHook GpuHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		gpuBeforeInsertHooks = append(gpuBeforeInsertHooks, gpuHook)
	case boil.BeforeUpdateHook:
		gpuBeforeUpdateHooks = append(gpuBeforeUpdateHooks, gpuHook)
	case boil.BeforeDeleteHook:
		gpuBeforeDeleteHooks = append(gpuBeforeDeleteHooks, gpuHook)
	case boil.BeforeUpsertHook:
		gpuBeforeUpsertHooks = append(gpuBeforeUpsertHooks, gpuHook)
	case boil.AfterInsertHook:
		gpuAfterInsertHooks = append(gpuAfterInsertHooks, gpuHook)
	case boil.AfterSelectHook:
		gpuAfterSelectHooks = append(gpuAfterSelectHooks, gpuHook)
	case boil.AfterUpdateHook:
		gpuAfterUpdateHooks = append(gpuAfterUpdateHooks, gpuHook)
	case boil.AfterDeleteHook:
		gpuAfterDeleteHooks = append(gpuAfterDeleteHooks, gpuHook)
	case boil.AfterUpsertHook:
		gpuAfterUpsertHooks = append(gpuAfterUpsertHooks, gpuHook)
	}
}

// One returns a single gpu record from the query.
func (q gpuQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Gpu, error) {
	o := &Gpu{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gpu")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Gpu records from the query.
func (q gpuQuery) All(ctx context.Context, exec boil.ContextExecutor) (GpuSlice, error) {
	var o []*Gpu

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Gpu slice")
	}

	if len(gpuAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Gpu records in the query.
func (q gpuQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gpu rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gpuQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gpu exists")
	}

	return count > 0, nil
}

// GpuThings retrieves all the gpu_thing's GpuThings with an executor.
func (o *Gpu) GpuThings(mods ...qm.QueryMod) gpuThingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"gpu_thing\".\"gpu_id\"=?", o.GPUID),
	)

	query := GpuThings(queryMods...)
	queries.SetFrom(query.Query, "\"gpu_thing\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"gpu_thing\".*"})
	}

	return query
}

// LoadGpuThings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gpuL) LoadGpuThings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGpu interface{}, mods queries.Applicator) error {
	var slice []*Gpu
	var object *Gpu

	if singular {
		object = maybeGpu.(*Gpu)
	} else {
		slice = *maybeGpu.(*[]*Gpu)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gpuR{}
		}
		args = append(args, object.GpuID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gpuR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GPUID) {
					continue Outer
				}
			}

			args = append(args, obj.GpuID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gpu_thing`),
		qm.WhereIn(`gpu_thing.gpu_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load gpu_thing")
	}

	var resultSlice []*GpuThing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice gpu_thing")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on gpu_thing")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gpu_thing")
	}

	if len(gpuThingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GpuThings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gpuThingR{}
			}
			foreign.R.Gpu = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GPUID, foreign.GpuID) {
				local.R.GpuThings = append(local.R.GpuThings, foreign)
				if foreign.R == nil {
					foreign.R = &gpuThingR{}
				}
				foreign.R.Gpu = local
				break
			}
		}
	}

	return nil
}

// AddGpuThings adds the given related objects to the existing relationships
// of the gpu, optionally inserting them as new records.
// Appends related to o.R.GpuThings.
// Sets related.R.Gpu appropriately.
func (o *Gpu) AddGpuThings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GpuThing) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GpuID, o.GPUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"gpu_thing\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"gpu_id"}),
				strmangle.WhereClause("\"", "\"", 2, gpuThingPrimaryKeyColumns),
			)
			values := []interface{}{o.GPUID, rel.GpuThingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GpuID, o.GPUID)
		}
	}

	if o.R == nil {
		o.R = &gpuR{
			GpuThings: related,
		}
	} else {
		o.R.GpuThings = append(o.R.GpuThings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gpuThingR{
				Gpu: o,
			}
		} else {
			rel.R.Gpu = o
		}
	}
	return nil
}

// SetGpuThings removes all previously related items of the
// gpu replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Gpu's GpuThings accordingly.
// Replaces o.R.GpuThings with related.
// Sets related.R.Gpu's GpuThings accordingly.
func (o *Gpu) SetGpuThings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GpuThing) error {
	query := "update \"gpu_thing\" set \"gpu_id\" = null where \"gpu_id\" = $1"
	values := []interface{}{o.GPUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GpuThings {
			queries.SetScanner(&rel.GpuID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Gpu = nil
		}

		o.R.GpuThings = nil
	}
	return o.AddGpuThings(ctx, exec, insert, related...)
}

// RemoveGpuThings relationships from objects passed in.
// Removes related items from R.GpuThings (uses pointer comparison, removal does not keep order)
// Sets related.R.Gpu.
func (o *Gpu) RemoveGpuThings(ctx context.Context, exec boil.ContextExecutor, related ...*GpuThing) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GpuID, nil)
		if rel.R != nil {
			rel.R.Gpu = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("gpu_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GpuThings {
			if rel != ri {
				continue
			}

			ln := len(o.R.GpuThings)
			if ln > 1 && i < ln-1 {
				o.R.GpuThings[i] = o.R.GpuThings[ln-1]
			}
			o.R.GpuThings = o.R.GpuThings[:ln-1]
			break
		}
	}

	return nil
}

// Gpus retrieves all the records using an executor.
func Gpus(mods ...qm.QueryMod) gpuQuery {
	mods = append(mods, qm.From("\"gpu\""))
	return gpuQuery{NewQuery(mods...)}
}

// FindGpu retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGpu(ctx context.Context, exec boil.ContextExecutor, gPUID int, selectCols ...string) (*Gpu, error) {
	gpuObj := &Gpu{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gpu\" where \"gpu_id\"=$1", sel,
	)

	q := queries.Raw(query, gPUID)

	err := q.Bind(ctx, exec, gpuObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gpu")
	}

	return gpuObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Gpu) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gpuInsertCacheMut.RLock()
	cache, cached := gpuInsertCache[key]
	gpuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gpuAllColumns,
			gpuColumnsWithDefault,
			gpuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gpuType, gpuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gpuType, gpuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gpu\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gpu\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gpu")
	}

	if !cached {
		gpuInsertCacheMut.Lock()
		gpuInsertCache[key] = cache
		gpuInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Gpu.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Gpu) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gpuUpdateCacheMut.RLock()
	cache, cached := gpuUpdateCache[key]
	gpuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gpuAllColumns,
			gpuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update gpu, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gpu\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gpuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gpuType, gpuMapping, append(wl, gpuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update gpu row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for gpu")
	}

	if !cached {
		gpuUpdateCacheMut.Lock()
		gpuUpdateCache[key] = cache
		gpuUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gpuQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for gpu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for gpu")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GpuSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gpu\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gpuPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gpu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gpu")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Gpu) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gpu provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gpuColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gpuUpsertCacheMut.RLock()
	cache, cached := gpuUpsertCache[key]
	gpuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gpuAllColumns,
			gpuColumnsWithDefault,
			gpuColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			gpuAllColumns,
			gpuPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert gpu, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gpuPrimaryKeyColumns))
			copy(conflict, gpuPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gpu\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gpuType, gpuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gpuType, gpuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert gpu")
	}

	if !cached {
		gpuUpsertCacheMut.Lock()
		gpuUpsertCache[key] = cache
		gpuUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Gpu record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Gpu) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Gpu provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gpuPrimaryKeyMapping)
	sql := "DELETE FROM \"gpu\" WHERE \"gpu_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from gpu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for gpu")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gpuQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gpuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GpuSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gpuBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gpu\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gpu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gpu")
	}

	if len(gpuAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Gpu) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGpu(ctx, exec, o.GPUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GpuSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GpuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gpuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gpu\".* FROM \"gpu\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gpuPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GpuSlice")
	}

	*o = slice

	return nil
}

// GpuExists checks if the Gpu row exists.
func GpuExists(ctx context.Context, exec boil.ContextExecutor, gPUID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gpu\" where \"gpu_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gPUID)
	}
	row := exec.QueryRowContext(ctx, sql, gPUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gpu exists")
	}

	return exists, nil
}
