// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGpuThings(t *testing.T) {
	t.Parallel()

	query := GpuThings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGpuThingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGpuThingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GpuThings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGpuThingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GpuThingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGpuThingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GpuThingExists(ctx, tx, o.GpuThingID)
	if err != nil {
		t.Errorf("Unable to check if GpuThing exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GpuThingExists to return true, but got false.")
	}
}

func testGpuThingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gpuThingFound, err := FindGpuThing(ctx, tx, o.GpuThingID)
	if err != nil {
		t.Error(err)
	}

	if gpuThingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGpuThingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GpuThings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGpuThingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GpuThings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGpuThingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gpuThingOne := &GpuThing{}
	gpuThingTwo := &GpuThing{}
	if err = randomize.Struct(seed, gpuThingOne, gpuThingDBTypes, false, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}
	if err = randomize.Struct(seed, gpuThingTwo, gpuThingDBTypes, false, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gpuThingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gpuThingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GpuThings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGpuThingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gpuThingOne := &GpuThing{}
	gpuThingTwo := &GpuThing{}
	if err = randomize.Struct(seed, gpuThingOne, gpuThingDBTypes, false, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}
	if err = randomize.Struct(seed, gpuThingTwo, gpuThingDBTypes, false, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gpuThingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gpuThingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gpuThingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GpuThing) error {
	*o = GpuThing{}
	return nil
}

func gpuThingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GpuThing) error {
	*o = GpuThing{}
	return nil
}

func gpuThingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GpuThing) error {
	*o = GpuThing{}
	return nil
}

func gpuThingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GpuThing) error {
	*o = GpuThing{}
	return nil
}

func gpuThingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GpuThing) error {
	*o = GpuThing{}
	return nil
}

func gpuThingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GpuThing) error {
	*o = GpuThing{}
	return nil
}

func gpuThingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GpuThing) error {
	*o = GpuThing{}
	return nil
}

func gpuThingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GpuThing) error {
	*o = GpuThing{}
	return nil
}

func gpuThingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GpuThing) error {
	*o = GpuThing{}
	return nil
}

func testGpuThingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GpuThing{}
	o := &GpuThing{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gpuThingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GpuThing object: %s", err)
	}

	AddGpuThingHook(boil.BeforeInsertHook, gpuThingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gpuThingBeforeInsertHooks = []GpuThingHook{}

	AddGpuThingHook(boil.AfterInsertHook, gpuThingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gpuThingAfterInsertHooks = []GpuThingHook{}

	AddGpuThingHook(boil.AfterSelectHook, gpuThingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gpuThingAfterSelectHooks = []GpuThingHook{}

	AddGpuThingHook(boil.BeforeUpdateHook, gpuThingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gpuThingBeforeUpdateHooks = []GpuThingHook{}

	AddGpuThingHook(boil.AfterUpdateHook, gpuThingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gpuThingAfterUpdateHooks = []GpuThingHook{}

	AddGpuThingHook(boil.BeforeDeleteHook, gpuThingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gpuThingBeforeDeleteHooks = []GpuThingHook{}

	AddGpuThingHook(boil.AfterDeleteHook, gpuThingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gpuThingAfterDeleteHooks = []GpuThingHook{}

	AddGpuThingHook(boil.BeforeUpsertHook, gpuThingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gpuThingBeforeUpsertHooks = []GpuThingHook{}

	AddGpuThingHook(boil.AfterUpsertHook, gpuThingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gpuThingAfterUpsertHooks = []GpuThingHook{}
}

func testGpuThingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGpuThingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gpuThingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGpuThingToOneGpuUsingGpu(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GpuThing
	var foreign Gpu

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gpuDBTypes, false, gpuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gpu struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.GpuID, foreign.GPUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Gpu().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GPUID, foreign.GPUID) {
		t.Errorf("want: %v, got %v", foreign.GPUID, check.GPUID)
	}

	slice := GpuThingSlice{&local}
	if err = local.L.LoadGpu(ctx, tx, false, (*[]*GpuThing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Gpu == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Gpu = nil
	if err = local.L.LoadGpu(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Gpu == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGpuThingToOneSetOpGpuUsingGpu(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GpuThing
	var b, c Gpu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gpuThingDBTypes, false, strmangle.SetComplement(gpuThingPrimaryKeyColumns, gpuThingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gpuDBTypes, false, strmangle.SetComplement(gpuPrimaryKeyColumns, gpuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gpuDBTypes, false, strmangle.SetComplement(gpuPrimaryKeyColumns, gpuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Gpu{&b, &c} {
		err = a.SetGpu(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Gpu != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GpuThings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.GpuID, x.GPUID) {
			t.Error("foreign key was wrong value", a.GpuID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GpuID))
		reflect.Indirect(reflect.ValueOf(&a.GpuID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.GpuID, x.GPUID) {
			t.Error("foreign key was wrong value", a.GpuID, x.GPUID)
		}
	}
}

func testGpuThingToOneRemoveOpGpuUsingGpu(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GpuThing
	var b Gpu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gpuThingDBTypes, false, strmangle.SetComplement(gpuThingPrimaryKeyColumns, gpuThingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gpuDBTypes, false, strmangle.SetComplement(gpuPrimaryKeyColumns, gpuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGpu(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGpu(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Gpu().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Gpu != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.GpuID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GpuThings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGpuThingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGpuThingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GpuThingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGpuThingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GpuThings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gpuThingDBTypes = map[string]string{`GpuThingID`: `integer`, `GpuID`: `integer`}
	_               = bytes.MinRead
)

func testGpuThingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gpuThingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gpuThingAllColumns) == len(gpuThingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGpuThingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gpuThingAllColumns) == len(gpuThingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GpuThing{}
	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gpuThingDBTypes, true, gpuThingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gpuThingAllColumns, gpuThingPrimaryKeyColumns) {
		fields = gpuThingAllColumns
	} else {
		fields = strmangle.SetComplement(
			gpuThingAllColumns,
			gpuThingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GpuThingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGpuThingsUpsert(t *testing.T) {
	t.Parallel()

	if len(gpuThingAllColumns) == len(gpuThingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GpuThing{}
	if err = randomize.Struct(seed, &o, gpuThingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GpuThing: %s", err)
	}

	count, err := GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gpuThingDBTypes, false, gpuThingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GpuThing struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GpuThing: %s", err)
	}

	count, err = GpuThings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
