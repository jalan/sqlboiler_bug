// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Gpus", testGpus)
	t.Run("GpuThings", testGpuThings)
}

func TestDelete(t *testing.T) {
	t.Run("Gpus", testGpusDelete)
	t.Run("GpuThings", testGpuThingsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Gpus", testGpusQueryDeleteAll)
	t.Run("GpuThings", testGpuThingsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Gpus", testGpusSliceDeleteAll)
	t.Run("GpuThings", testGpuThingsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Gpus", testGpusExists)
	t.Run("GpuThings", testGpuThingsExists)
}

func TestFind(t *testing.T) {
	t.Run("Gpus", testGpusFind)
	t.Run("GpuThings", testGpuThingsFind)
}

func TestBind(t *testing.T) {
	t.Run("Gpus", testGpusBind)
	t.Run("GpuThings", testGpuThingsBind)
}

func TestOne(t *testing.T) {
	t.Run("Gpus", testGpusOne)
	t.Run("GpuThings", testGpuThingsOne)
}

func TestAll(t *testing.T) {
	t.Run("Gpus", testGpusAll)
	t.Run("GpuThings", testGpuThingsAll)
}

func TestCount(t *testing.T) {
	t.Run("Gpus", testGpusCount)
	t.Run("GpuThings", testGpuThingsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Gpus", testGpusHooks)
	t.Run("GpuThings", testGpuThingsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Gpus", testGpusInsert)
	t.Run("Gpus", testGpusInsertWhitelist)
	t.Run("GpuThings", testGpuThingsInsert)
	t.Run("GpuThings", testGpuThingsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("GpuThingToGpuUsingGpu", testGpuThingToOneGpuUsingGpu)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("GpuToGpuThings", testGpuToManyGpuThings)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("GpuThingToGpuUsingGpuThings", testGpuThingToOneSetOpGpuUsingGpu)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("GpuThingToGpuUsingGpuThings", testGpuThingToOneRemoveOpGpuUsingGpu)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("GpuToGpuThings", testGpuToManyAddOpGpuThings)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("GpuToGpuThings", testGpuToManySetOpGpuThings)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("GpuToGpuThings", testGpuToManyRemoveOpGpuThings)
}

func TestReload(t *testing.T) {
	t.Run("Gpus", testGpusReload)
	t.Run("GpuThings", testGpuThingsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Gpus", testGpusReloadAll)
	t.Run("GpuThings", testGpuThingsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Gpus", testGpusSelect)
	t.Run("GpuThings", testGpuThingsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Gpus", testGpusUpdate)
	t.Run("GpuThings", testGpuThingsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Gpus", testGpusSliceUpdateAll)
	t.Run("GpuThings", testGpuThingsSliceUpdateAll)
}
